{"name":"Niod","tagline":"NIOD is an API for DCS World mission editing, using a NodeJS server to communicate with a LUA library ","body":"Latest build tests and linting\r\n[![CircleCI](https://circleci.com/gh/Ked57/NIOD.svg?style=svg)](https://discord.gg/WUW24w8)\r\n\r\n# NIOD\r\n\r\n[![Discord logo](https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-64.png \"Join us on discord !\") Join us on discord !](https://discord.gg/WUW24w8)\r\n\r\n\r\n\r\n## Introduction\r\n\r\nNIOD is a npm package that lets you connect to DCS World using a socket. Once connected, it offers a variety of functionalities :\r\n\r\n- Events: You can listen to events from DCS World\r\n- Functions: You can call functions from the DCS Mission Scripting API\r\n\r\n## How does this work ?\r\n\r\nA socket is created in the mission scripting environment, NIOD connects to it and sends / receives commands discribing events and functions. \r\n\r\nThe nodejs server stores callbacks linked to a callback id, this id is passed to the lua server which pass it\r\nback with the returned data. The dispatcher will then execute the right stored callback.\r\n\r\nHere's a basic example\r\n\r\n```javascript\r\nconst { initNiod, execute } = require(\"niod\");\r\ninitNiod().then(() => {\r\n  console.log(\r\n        execute(\"sayHello\", {}, message => console.log(\"got message\", message))\r\n      )\r\n});\r\n```\r\n\r\n## Instalation\r\n\r\n### Unsanitize the require function\r\n\r\nNiod requires DCS to import some functionalities from LUA so it can create a socket and access the OS time API, you'll need to \"unsanitize\" it. To do so go into your DCS installation folder `DCS World\\Scripts\\MissionScripting.lua` and edit these line.\r\n\r\n```lua\r\ndo\r\n\tsanitizeModule('os')\r\n\tsanitizeModule('io')\r\n\tsanitizeModule('lfs')\r\n\trequire = nil\r\n\tloadlib = nil\r\nend\r\n```\r\n\r\nto\r\n\r\n```lua\r\n\r\ndo\r\n\t--sanitizeModule('os')\r\n\tsanitizeModule('io')\r\n\tsanitizeModule('lfs')\r\n\t--require = nil\r\n\tloadlib = nil\r\nend\r\n```\r\n\r\n### Mission Editor\r\n\r\nThen you need to create a mission that loads the NIOD lua file found in the \"script\" folder.\r\n\r\nAnd there you go ! You're all set, you can import niod in your project and start the server using\r\n\r\n```javascript\r\nconst { initNiod } = require(\"niod\");\r\ninitNiod().then(() => {\r\n  // your mission code goes here\r\n});\r\n```\r\n\r\nand start coding !\r\n\r\n## Typescript support\r\n\r\nNiod is written in typescript, so the npm package is shipped with all the type declarations. Which means auto-completion depending on your code editor\r\n\r\n## API\r\n\r\nYou can find the complete docs at [docs link](https://github.com/ked57/NIOD)\r\n\r\nSince there is a lot of documented functions you probably won't need, here are links to:\r\n\r\n- Events documentation\r\n- Functions documentation\r\n\r\n## Guides\r\n\r\nI'll be writing guides with examples, links will be down below\r\n\r\n## Special thanks\r\n\r\nThanks to Drex from Dynamic DCS for all the help on sockets, go check his server out\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}